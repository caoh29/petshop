generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String               @id @default(uuid())
  name           String?
  email          String               @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  firstName      String
  lastName       String
  address        String?
  address2       String?
  city           String?
  state          String?
  zip            String?
  country        String?
  phone          String?
  isActive       Boolean?             @default(true)
  isAdmin        Boolean?             @default(false)
  isVerified     Boolean?             @default(false)
  isGuest        Boolean?             @default(false)
  passResets     PasswordResetToken[]
  otps           OTPToken[]
  accounts       Account[]
  Authenticators Authenticator[]
  cart           Cart?
  orders         Order[]
  reviews        Review[]
  sessions       Session[]
  wishlist       Product[]            @relation("UserWishlist")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  token   String   @unique
  userId  String
  expires DateTime
  isUsed  Boolean  @default(false)
  user    User     @relation(fields: [userId], references: [id])
}

model OTPToken {
  id      String   @id @default(uuid())
  token   String   @unique
  userId  String
  code    Int
  expires DateTime
  isUsed  Boolean  @default(false)
  user    User     @relation(fields: [userId], references: [id])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Order {
  id              String            @id @unique @default(uuid())
  userId          String
  total           Float
  createdAt       DateTime          @default(now())
  status          String
  shippingAddress String
  paymentMethod   String
  trackingNumber  String?
  deliveryMethod  String
  user            User              @relation(fields: [userId], references: [id])
  products        SelectedProduct[]
}

model Review {
  id        String   @id @default(uuid())
  rating    Float
  text      String
  createdAt DateTime @default(now())
  userId    String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Product {
  id               String            @id @default(uuid())
  sku              String
  image            String
  additionalImages String[]
  name             String
  price            Float
  category         String
  subcategory      String
  description      String
  sizes            String[]
  availableSizes   String[]
  colors           String[]
  availableColors  String[]
  stock            Int
  isOutOfStock     Boolean
  createdAt        DateTime          @default(now())
  reservedStock    Int               @default(0)
  updatedAt        DateTime          @updatedAt
  discount         Int               @default(0)
  reviews          Review[]
  selectedProducts SelectedProduct[]
  wishedBy         User[]            @relation("UserWishlist")
}

model SelectedProduct {
  id        String  @id @default(uuid())
  quantity  Int
  size      String?
  color     String?
  productId String
  cartId    String?
  orderId   String?
  price     Float?
  cart      Cart?   @relation(fields: [cartId], references: [id])
  order     Order?  @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Cart {
  id       String            @id @default(uuid())
  userId   String            @unique
  user     User              @relation(fields: [userId], references: [id])
  products SelectedProduct[]
}

model Category {
  id    String @id @default(uuid())
  name  String
  image String
}

model SubCategory {
  id    String @id @default(uuid())
  name  String
  image String
}

model Country {
  name   String
  code   String  @unique
  id     Int     @id @default(autoincrement())
  states State[]
}

model State {
  id        Int     @id @default(autoincrement())
  name      String
  code      String
  countryId Int
  country   Country @relation(fields: [countryId], references: [id])
}
